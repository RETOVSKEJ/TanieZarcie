"use client"

import {useEffect, useState, useRef} from "react"
import {useEffectAfterMount} from "@/hooks/useEffectAfterMount"
import s from "./SearchBar.module.css"
import {Food, Zestaw} from "@/types/types"
import SearchProductCard from "./SearchProductCard"
import {Inter, Dancing_Script} from "next/font/google"
import {BsSearch} from "react-icons/bs"

export const metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
}

const inter = Inter({
    weight: ["400", "700"],
    style: ["normal"],
    subsets: ["latin"],
    display: "swap",
})

function highlightSearchInput(productName: string, searchInput: string) {
    const index = productName.toLowerCase().indexOf(searchInput.toLowerCase())
    if (index !== -1) {
        return (
            <>
                {productName.substring(0, index)}
                <span style={{color: "#380"}}>
                    {productName.substring(index, index + searchInput.length)}
                </span>
                {productName.substring(index + searchInput.length)}
            </>
        )
    }
    return productName
}

export default function SearchBar() {
    const PRODUCT_LIMIT = 6

    const [hover, setHover] = useState<boolean>(false)
    const [focus, setFocus] = useState<boolean>(false)
    const [products, setProducts] = useState<(Food | Zestaw)[]>([])
    const [filteredProducts, setFilteredProducts] = useState<(Food | Zestaw)[]>(
        []
    )
    const [searchInput, setSearchInput] = useState<string>("")
    const inputRef = useRef<HTMLInputElement>(null)

    useEffectAfterMount(() => {
        ;(async () => {
            const res = await fetch("/api/products")
            const data: (Food | Zestaw)[] = await res.json()
            setProducts(data)
        })()
    }, [hover])

    useEffectAfterMount(() => {
        const filteredArr = products.filter(
            (product) =>
                product.name
                    .toLowerCase()
                    .includes(searchInput.toLowerCase()) ||
                product.slug.toLowerCase().includes(searchInput.toLowerCase())
        )
        setFilteredProducts(filteredArr)
    }, [searchInput])

    const searchWrapperStyles = {
        display: focus ? "flex" : "none",
    }

    return (
        <>
            <div
                onMouseOver={() => setHover(true)}
                onFocus={() => setFocus(true)}
                onBlur={() => setFocus(false)}
                className={s.search}
            >
                <BsSearch />
                <input
                    ref={inputRef}
                    type="search"
                    className={s.input}
                    onChange={(e) => setSearchInput(e.target.value)}
                    value={searchInput}
                    placeholder="Wyszukaj Produkt..."
                />
                <div
                    onMouseDown={(e) => {
                        e.preventDefault()
                    }}
                    style={searchWrapperStyles}
                    className={s.searchResults__wrapper}
                >
                    <div className={s.searchResults}>
                        {filteredProducts.length === 0 ? (
                            <p>Brak Wyników...</p>
                        ) : (
                            filteredProducts.map((product) => {
                                return (
                                    <SearchProductCard
                                        product={product}
                                        setFocus={setFocus}
                                    >
                                        <span>
                                            {highlightSearchInput(
                                                product.name,
                                                searchInput
                                            )}
                                        </span>
                                    </SearchProductCard>
                                )
                            })
                        )}
                    </div>
                    {filteredProducts.length > PRODUCT_LIMIT ? (
                        <div className={s.countDiv}>
                            <p className={`${inter.className} ${s.count}`}>
                                Ilość wyników: {filteredProducts.length}
                            </p>
                            <button
                                onClick={() => {
                                    inputRef.current?.blur()
                                    setFilteredProducts([])
                                }}
                            >
                                Wyjdź
                            </button>
                        </div>
                    ) : null}
                </div>
            </div>
        </>
    )
}
